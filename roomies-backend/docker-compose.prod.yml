# ðŸš¢ Roomies Backend - Production Docker Compose
# Full production stack with PostgreSQL, Redis, and SSL termination

version: '3.8'

services:
  # ===== REVERSE PROXY & SSL TERMINATION =====
  nginx:
    image: nginx:alpine
    container_name: roomies-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - roomies-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== APPLICATION SERVER =====
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: roomies-backend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://roomies_prod:${DB_PASSWORD}@postgres:5432/roomies_production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - LOG_LEVEL=info
      - BCRYPT_ROUNDS=14
      # Email configuration
      - EMAIL_FROM=${EMAIL_FROM:-roomiesappteam@gmail.com}
      # Optional SMTP configuration (uncomment and set via env/secret store)
      # - SMTP_SERVICE=gmail
      # - SMTP_USER=${SMTP_USER}
      # - SMTP_PASS=${SMTP_PASS}
      # - SMTP_HOST=${SMTP_HOST}
      # - SMTP_PORT=${SMTP_PORT}
      # - SMTP_SECURE=${SMTP_SECURE}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./certs:/app/certs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - roomies-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ===== POSTGRESQL DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: roomies-postgres
    environment:
      - POSTGRES_DB=roomies_production
      - POSTGRES_USER=roomies_prod
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - roomies-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U roomies_prod -d roomies_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: roomies-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256MB
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - roomies-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ===== BACKUP SERVICE =====
  backup:
    image: alpine:latest
    container_name: roomies-backup
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=roomies_production
      - POSTGRES_USER=roomies_prod
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    networks:
      - roomies-network
    restart: unless-stopped
    depends_on:
      - postgres
    command: >
      sh -c "apk add --no-cache postgresql-client curl &&
             echo '0 2 * * * /usr/local/bin/backup.sh' | crontab - &&
             crond -f"

  # ===== MONITORING =====
  monitoring:
    image: prom/node-exporter:latest
    container_name: roomies-monitoring
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - roomies-network
    restart: unless-stopped

# ===== NETWORKS =====
networks:
  roomies-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# ===== ENVIRONMENT VARIABLES =====
# Create a .env.prod file with the following variables:
# DB_PASSWORD=your_secure_database_password
# REDIS_PASSWORD=your_secure_redis_password  
# JWT_SECRET=your_256_bit_secure_jwt_secret
